
ДОБАВЛЕНИЕ
-в nodeBoard нормальный функционал добавления изменения соединений и vNode
-получение connectionRule из любой ноды
-в nodeOperator работу с connectionRule
-разделить методы на геттеры, сеттеры и остальное 
(по возможности автоматизировать)
-переименовать onThisBoard в contains
-шаблонная генерация операций от функций с различными параметрами


ПРОВЕРКА
-защита итераторов от никудаНиУказывания
-набор тестов для проверки отсутствия нулевого соединения
-логирование

РЕФАКТОРИНГ
-нормальные функции инициализации итератора 
	по объекту или по ноде итератора, вместо сомнительного конструктора и костыля
-ограничение добавлиния и изменения соединений. Специальный класс, который будет этим заниматься
	в него также поместить добалление и удаление нод. ?сделать логирование?
-перевести enum в conRule в enum class, при этом добавить typedef
-переименовать всё и вся
-обезопасить getData<что угодно>()
-заменить inOutput на bool readOnly

ИДЕИ НА РАЗМЫШЛЕНИЕ
-ограничение возможностей перемещения указателей с помощью connectionRule
-отдельный пользовательский интерфейс для работы с нечто рядового пользователя 
	(без необходимости вникать в хитросплетения говнокода)
-нужно ли превращать интерфейс IDE в универсальный интерфейс на основе nechto
-что нужно для байткода? когда его делать? что нужно изучить?

УТВЕРЖДЕНИЯ
-структуры visualNode и visualConnection должны содержать всё, что требуется для nodeDisplay