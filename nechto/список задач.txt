
ДОБАВЛЕНИЕ
-получение connectionRule из любой ноды
-в nodeOperator работу с connectionRule
-разделить методы на геттеры, сеттеры и остальное 
(по возможности автоматизировать)
-шаблонная генерация операций от функций с различными параметрами
-нормальная работа с итераторами:
	первая позиция после конца, сдвиг от и до (соотвественно сдвинуть и добавить, удалить и сдвинуть)
-добавить connectionRule в namedExCon
-ограничение добавлиния и изменения соединений. Специальный класс, который будет этим заниматься
	в него также поместить добалление и удаление нод. ?сделать логирование?
-текстуры в visualNode и их генераторы (например по тексту)
-добавить общий родительский класс для всего visual
-сделать отображение visualGroup
-унаследовать visualGroup от namedExCon
-сильная и слабая связь в connectionRule
-добавить макросы для итераторов
-убрать подтипы у Text и по возможности привести его к ExternalObject

ПРОВЕРКА
-защита итераторов от никудаНиУказывания
-набор тестов для проверки отсутствия нулевого соединения
-логирование

РЕФАКТОРИНГ
-нормальные функции инициализации итератора 
	по объекту или по ноде итератора, вместо сомнительного конструктора и костыля
-перевести enum в conRule в enum class, при этом добавить typedef
-переименовать всё и вся
-обезопасить getData<что угодно>()
-заменить inOutput на bool readOnly
-классы наследники от nodePtr для каждого типа ноды с встроенной assert проверкой
-переименовать onThisBoard в contains

УТВЕРЖДЕНИЯ
-структуры visualNode и visualConnection должны содержать всё, что требуется для nodeDisplay